`include"Urna_module.v"
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module FPGA_Urna(

	//////////// CLOCK //////////
	CLOCK_50,
	CLOCK2_50,
	CLOCK3_50,

	//////////// LED //////////
	LEDG,
	LEDR,

	//////////// KEY //////////
	KEY,

	//////////// SW //////////
	SW
);

//=======================================================
//  PARAMETER declarations
//=======================================================


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input 		          		CLOCK_50;
input 		          		CLOCK2_50;
input 		          		CLOCK3_50;

//////////// LED //////////
output		     [8:0]		LEDG;
output		    [17:0]		LEDR;

//////////// KEY //////////
input 		     [3:0]		KEY;

//////////// SW //////////
input 		    [17:0]		SW;


//=======================================================
//  REG/WIRE declarations
//=======================================================
wire [7:0] c1;
wire [7:0] c2;
wire [7:0] c3;
wire [7:0] c4;
wire [7:0] nulo;
reg [7:0] REG_AUX;
wire StatusLED;
assign LEDG[7] = StatusLED;
assign LEDR[0] = ~StatusLED;
assign LEDR[17:10] = REG_AUX;
reg [2:0]Aux;
//=======================================================
//  Structural coding
//=======================================================
Urna_module UrnaFPGA(.C1(c1), .C2(c2), .C3(c3), .C4(c4), .Nulo(nulo), .Clock(CLOCK_50), .Digit(SW[17:14]), .Valid(KEY[3]), .Finish(KEY[2]),.Status(StatusLED));

always @ (posedge CLOCK_50) begin
  Aux = SW[2:0];
	case (Aux)                     //Selecionando impressao para cada candidato//
		3'b001:begin
			REG_AUX <= c1;
		end

		3'b010:begin
			REG_AUX <= c2;
		end

		3'b011:begin
			REG_AUX <= c3;
		end

		3'b100:begin
			REG_AUX <= c4;
		end

		3'b101:begin
			REG_AUX <= nulo;
		end
	endcase
end

endmodule
